void sumofall(vector<int> arr,int index, int n, int sum, vector<int>& ans){
    if(index==n){
        ans.push_back(sum);
        return;
    }
    sumofall(arr,index+1,n,sum+arr[index],ans);
    sumofall(arr,index+1,n,sum,ans);
}
    vector<int> subsetSums(vector<int> arr, int N)
    {
        // Write Your Code here
        vector<int> ans;
        sumofall(arr,0,N,0,ans);
        return ans;
        
    }
// iterative solution 
 vector<int> subsetSums(vector<int> arr, int N)
    {
        // Write Your Code here
        vector<int> ans;
        long long total=1<<N;// for making 2^n
        for(long long i=0;i<total;i++)
        { long long sum=0;
            for( int j=0;j<N;j++)
            {
                if(i&1<<j)
                {
                    sum+=arr[j];
                }
            }
            ans.push_back(sum);
        }
      return ans;  
     }
     
     //iterative effective solution
     vector<int> subsetSums(vector<int> arr, int N)
     {
     vector<int> ans={0};
     for(int i=0;i<N;i++){
      
         int size=ans.size();
         for(int j=0;j<size;j++){
             ans.push_back(arr[i]+ans[j]);
         }
     }
     return ans;
   }
};
