/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int>v;
        if(root==NULL)
        {
            return v;
        }
        v.push_back(root->val);
        vector<int> left=preorderTraversal(root->left);
        v.insert(v.end(),left.begin(),left.end());
       vector<int> right= preorderTraversal(root->right);
        v.insert(v.end(),right.begin(),right.end());
        return v;
        
        
        
        
        
        
        
        
        // iterative solution
    vector<int> v;
    TreeNode* node=root;
    stack<TreeNode*> s;
    while(node||!s.empty())
    { 
        while(node){
        v.push_back(node->val);
        s.push(node);
        node=node->left;
    }
    node=s.top();
    s.pop();
    node=node->right;
    }
    return v;
    
    
      // morris traversal
     vector<int> v;
     TreeNode* current=root;
     while(current)
     {
         if(!current->left)
         {
            v.push_back(current->val);
            current=current->right;
         }
         else{
             TreeNode* temp=current->left;
             while(temp->right)
             {
                 temp=temp->right;
             }
             temp->right=current->right;
             current->right=NULL;
             v.push_back(current->val);
             current=current->left;
         }

     }
     return v;

    }
};
