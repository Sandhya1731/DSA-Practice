//https://practice.geeksforgeeks.org/problems/minimum-spanning-tree/1
class Disjoint{
    vector<int>rank,par;
    public :
    Disjoint(int n){
        rank.resize(n);//works for zero based indexing
        par.resize(n);
        for(int i=0;i<n;i++)
        {
            par[i]=i;
        }
    }
    void unionbysize(int x, int y)
    {
        int uparx=findupar(x);
        int upary=findupar(y);
        if(uparx==upary)return ;
        if(rank[uparx]>=rank[upary])
        {
            par[upary]=uparx;
            rank[uparx]+=rank[upary];
        }
        else{
            par[uparx]=upary;
            rank[upary]+=rank[uparx];
        }
    }
    int findupar(int x)
    {
        if(x==par[x])return x;
        return par[x]=findupar(par[x]);
    }
    
};
class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        vector<pair<int,pair<int,int>>>edges;
        for(int i=0;i<V;i++)
        {
            for(auto it:adj[i]){
                int u=i;
                int v=it[0];
                int wt=it[1];
                
                edges.push_back({wt,{u,v}});
            }
        }
        sort(edges.begin(),edges.end());
        Disjoint ds(V);
        int w=0;
        for(auto i:edges){
            int u=i.second.first;
            int v=i.second.second;
            int wt=i.first;
            if(ds.findupar(u)!=ds.findupar(v)){
                ds.unionbysize(u,v);
                w+=wt;
            }
        }
        
     return w; 
    }
};
