//https://practice.geeksforgeeks.org/problems/number-of-distinct-islands/1
 void bfs(int i,int j,vector<vector<int>>& grid,int r1,int c1,vector<pair<int,int>>&v,vector<vector<int>>& vis){
        int n=grid.size();
        int m=grid[0].size();
        vis[i][j]=1;
        queue<pair<int,int>>q;
        q.push({i,j});
        int delx[]={-1,0,1,0};
        int dely[]={0,-1,0,1};
        while(!q.empty())
        {
            int r=q.front().first;
            int c=q.front().second;
            q.pop();
            v.push_back({r-r1,c-c1});
            for(int i=0; i<4; i++)
            {
                int nr=r+delx[i];
                int nc=c+dely[i];
                if(nr>=0 and nr<n and nc>=0 and nc<m and !vis[nr][nc] and grid[nr][nc]==1)
                {
                    vis[nr][nc]=1;
                    q.push({nr,nc});
                }
            }
        }
    }
    int countDistinctIslands(vector<vector<int>>& grid) {
        // code here
        int n=grid.size();
        int m=grid[0].size();
        set<vector<pair<int,int>>>s;
        vector<vector<int>>vis(n,vector<int>(m,0));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!vis[i][j]&&grid[i][j]==1)
                {
                    vector<pair<int,int>>v;
                    bfs(i,j,grid,i,j,v,vis);
                    s.insert(v);
                }
            }
        }
        return s.size();
    }
