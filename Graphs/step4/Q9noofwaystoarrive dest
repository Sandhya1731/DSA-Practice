 int countPaths(int n, vector<vector<int>>& roads) {
        // code here
        int mod=(int)1e9+7;
        vector<pair<int,int>>adj[n];
        for(int i=0;i<roads.size();i++)
        {
            int u=roads[i][0];
            int v=roads[i][1];
            int w=roads[i][2];
            adj[u].push_back({v,w});
            adj[v].push_back({u,w});
        }
        vector<long>dis(n,1e12);
        vector<int>ways(n,0);
        priority_queue<pair<long,int>,vector<pair<long,int>>,greater<pair<long,int>>>pq;
        pq.push({0,0});
        dis[0]=0;
        ways[0]=1;
        while(!pq.empty())
        {
            long dist=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            for(auto it:adj[node])
            {long egewt=it.second;
                if(dist+egewt<dis[it.first])
                {
                    dis[it.first]=dist+egewt;
                    ways[it.first]=ways[node];
                    pq.push({dis[it.first],it.first});
                }
                else if(dist+egewt==dis[it.first]){
                    ways[it.first]=(ways[it.first]+ways[node])%mod;
                }
            }
        }
    
        return ways[n-1]%mod;
    }
