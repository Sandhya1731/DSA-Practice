//https://practice.geeksforgeeks.org/problems/shortest-path-in-undirected-graph/1
vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        // code here
        vector<pair<int,int>>adj[N];
       for(int i=0;i<M;i++)
       {
           vector<int> temp=edges[i];
           adj[temp[0]].push_back({temp[1],temp[2]});
       }
       vector<int>dis(N,INT_MAX);
       dis[0]=0;;
       queue<int>q;
       q.push(0);
       while(!q.empty())
       {
           int temp=q.front();
           q.pop();
           for(auto it:adj[temp])
           {
               int distance=dis[temp]+it.second;
               if(distance<dis[it.first])
               {
                   dis[it.first]=distance;
                   q.push(it.first);
               }
           }
       }
       for(int i=0;i<N;i++)
       {
           if(dis[i]==INT_MAX)
           {
               dis[i]=-1;
           }
       }
       return dis;
    }
    //optimise it via toposort
