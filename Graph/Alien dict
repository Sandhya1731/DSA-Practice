class Solution{
    public:
    string findOrder(string dict[], int N, int K) {
       
       string ans="";
       
       // creating the adj list
       vector<vector<int>>adj(K);
       for(int i=0;i<N-1;i++)
       {
           int n=dict[i].size();
           int m=dict[i+1].size();
           int j=0;
           while(j<n && j<m)
           {
               if(dict[i][j]!=dict[i+1][j])
               {
                   adj[dict[i][j]-'a'].push_back(dict[i+1][j]-'a');
                   break;
               }
               j++;
           }
       }
      
       // finding the indegree
       
       vector<int> indegree(K, 0);

       for(int i=0;i<K;i++)
       {
           for(int j=0;j<adj[i].size();j++)
           {
               indegree[adj[i][j]]++;
           }
       }
       
       // finding the character with 0 indegree
       
      vector<int> vis(K, 0);
       queue<char>q;
       for(int i=0;i<K;i++)
       {
           if(indegree[i]==0)
           {
               q.push('a'+i);
               vis[q.front()-'a']=1;
           }
       }
        
       while(!q.empty())
       {
           char c=q.front();
           q.pop();
           ans.push_back(c);
        //   cout<<ans<<endl;
           vis[c-'a']=1;
           for(int i=0;i<adj[c-'a'].size();i++)
           {
               if(!vis[adj[c-'a'][i]] )
               {
                   indegree[adj[c-'a'][i]]--;
                   if(indegree[adj[c-'a'][i]]==0)
                   {
                   q.push(adj[c-'a'][i]+'a');
                   vis[adj[c-'a'][i]]=1;
                   }
               }
           }
       }
       return ans;
    }
