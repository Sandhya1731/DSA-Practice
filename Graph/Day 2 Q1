class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& v) {
        // Code here
        int ans=0;
        queue<pair<int,int>>q;
        int n=v.size();
        int m=v[0].size();
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(v[i][j]==2)q.push({i,j});
            }
        }
        if(q.size()==m*n)return ans;
        q.push({-1,-1});
        while(q.size() && q.front().first!=-1)
        {
           while(q.front().first!=-1)
           {
               int a=q.front().first;
               int b=q.front().second;
               q.pop();
               if(a-1>=0 && v[a-1][b]==1)
               {
                   v[a-1][b]=2;
                   q.push({a-1,b});
               }
               if(a+1<n && v[a+1][b]==1)
               {
                   v[a+1][b]=2;
                   q.push({a+1,b});
               }
               if(b-1>=0 && v[a][b-1]==1)
               {
                   v[a][b-1]=2;
                   q.push({a,b-1});
               }
               if(b+1<m && v[a][b+1]==1)
               {
                   v[a][b+1]=2;
                   q.push({a,b+1});
               }
              
           }
            q.push({-1,-1});
           q.pop();
           ans++;
        }
         for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(v[i][j]==1) return -1;
            }
        }
        return ans-1; 
    }
};
