/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> v;
        if(root==NULL)
        {
            return v;
        }
        vector<int> left=inorderTraversal(root->left);
        v.insert(v.begin(),left.begin(),left.end());
        v.push_back(root->val);
        vector<int> right=inorderTraversal(root->right);
        v.insert(v.end(),right.begin(),right.end());
        return v;
    }
};

// Iterative solution
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root){
       TreeNode* node= root;
        stack <TreeNode*>s;
        vector<int> ans;
       while(node||!s.empty())
       {
        while(node){
          s.push(node);
          node=node->left;
        }
        node=s.top();
          s.pop();
             ans.push_back(node->val);
             node=node->right;
        }
        return ans;
        
        
  // Morris Traversal
  TreeNode* current=root;
    vector<int> v;
    while(current)
    {
        if(!current->left)
        {
          v.push_back(current->val);
          current=current->right;
        }
        else{
            TreeNode* temp=current->left;
            while(temp->right)
            {
                temp=temp->right;
            }
            temp->right=current;
            current=current->left;
            temp->right->left=NULL;
        }
    }
    return v;
    }
};
