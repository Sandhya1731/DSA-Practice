Approach 1:
initialize max_element with INT_MAX and iterate over the array while keep updating the variable max_element (same for min_element)
No of comparisions : 2*n
Small modification - initialize max_element and min_element with first two elements 
No of comparisions : 1 + 2(n-2)

Code :
int findSum(int A[], int N)
    {
    	//code here.
    	int min=A[0];
    	int max=A[0];
    	for(int i=1;i<N;i++){
    	    if(max<A[i]){
    	        max=A[i];
    	    }else if(min>A[i]){
    	        min=A[i];
    	    }
    	}
    	return max+min;
    }

Approach 2: (Tournament Method)
use divide and conquer approach
No of comparisions : 3n/2 -2   // if n is power of two

code:
class Solution
{
   public:
   struct Pair
{
    int min;
    int max;
};
struct Pair getMinMax(int arr[], int low, int high)
{
    struct Pair minmax, mml, mmr;
    int mid;
 
    // If there is only one element
    if (low == high) {
        minmax.max = arr[low];
        minmax.min = arr[low];
        return minmax;
    }
 
    // If there are two elements
    if (high == low + 1) {
        if (arr[low] > arr[high]) {
            minmax.max = arr[low];
            minmax.min = arr[high];
        }
        else {
            minmax.max = arr[high];
            minmax.min = arr[low];
        }
        return minmax;
    }
 
    // If there are more than 2 elements
    mid = (low + high) / 2;
    mml = getMinMax(arr, low, mid);
    mmr = getMinMax(arr, mid + 1, high);
 
    // Compare minimums of two parts
    if (mml.min < mmr.min)
        minmax.min = mml.min;
    else
        minmax.min = mmr.min;
 
    // Compare maximums of two parts
    if (mml.max > mmr.max)
        minmax.max = mml.max;
    else
        minmax.max = mmr.max;
 
    return minmax;
}
 
    int findSum(int A[], int N)
    {
    	//code here.
    
    struct Pair minimaxi=getMinMax(A,0,N-1);    
    return minimaxi.min+minimaxi.max;
    }

};

Approach 3: (Compare in Pairs)
If n is odd then initialize min and max as first element else as minimum and maximum of the first two elements. 
For rest of the elements, pick them in pairs and compare their maximum and minimum with max and min respectively. 
No of comparisions : 3*(n-1)/2      // n is odd
                     3n/2 -2        // n is even
