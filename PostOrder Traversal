/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> v;
        if(root==NULL)
        {
            return v;
        }
        vector<int> left=postorderTraversal(root->left);
        v.insert(v.begin(),left.begin(),left.end());
        vector<int> right=postorderTraversal(root->right);
        v.insert(v.end(),right.begin(),right.end());
        v.push_back(root->val);
         return v;
    }
    
    
    
    
       stack<pair<TreeNode*,int>> s;
       vector<int> v;
       TreeNode* node=root;
       while(node||!s.empty())
       { 
           if(node){
        s.push({node,0});
        node=node->left;
           }
           else{
           pair<TreeNode*,int> p=s.top();
           s.pop();
           if(p.second==0)
           {
             s.push({p.first,1});
             node=p.first->right;
           }
           else{
               v.push_back(p.first->val);
           }   
           }

       }
       return v;
};
